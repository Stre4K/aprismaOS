name: AprismaOS Build Matrix

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # 1. Build kernel on AMD64 (full build)
  build-kernel-amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Pull toolchain
        run: docker pull stre4k/aprisma:latest
      - name: Build kernel (amd64)
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace \
            stre4k/aprisma:latest \
            sh aprisma.sh --build iso

      - name: Upload kernel artifact (amd64)
        uses: actions/upload-artifact@v4
        with:
          name: kernel-amd64
          path: build/AprismaOS/sysroot/boot/aprisma.kernel

      - name: Upload ISO artifact (amd64)
        uses: actions/upload-artifact@v4
        with:
          name: iso-amd64
          path: build/aprisma.iso

        # 2. Build kernel on ARM64 (toolchain-only)
  build-kernel-arm64:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Pull toolchain
        run: docker pull stre4k/aprisma:latest
      - name: Build kernel (arm64 - toolchain only)
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace \
            stre4k/aprisma:latest \
            sh aprisma.sh --build kernel

      - name: Upload kernel artifact (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: kernel-arm64
          path: build/AprismaOS/sysroot/boot/aprisma.kernel

  # 3. macOS build (native + ISO)
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (brew)
        run: |
          brew update
          brew install make xorriso qemu i686-elf-binutils i686-elf-gcc i686-elf-grub
      - name: Build kernel + ISO (macOS)
        run: sh aprisma.sh --build iso --homebrew-grub

      - name: Upload kernel artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: kernel-macos
          path: build/AprismaOS/sysroot/boot/aprisma.kernel

      - name: Upload ISO artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: iso-macos
          path: build/aprisma.iso

  # 4. Smoke test: fake ISO creation with grub container (no artifact)
  iso-test-fake:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run fake ISO build
        run: |
          docker pull stre4k/aprisma:grub-22.04
          docker run --rm -v $PWD:/workspace -w /workspace \
            stre4k/aprisma:grub-22.04 \
            sh -c 'mkdir -p build/isodir/boot/grub && touch build/isodir/boot/aprisma.kernel && echo -e "menuentry \"Aprisma\" {\n  multiboot /boot/aprisma.kernel\n}" > build/isodir/boot/grub/grub.cfg && grub-mkrescue -o build/aprisma.iso build/isodir'

  # 5. Real ISO build (arm64): uses artifact from build-kernel-arm64
  build-iso-arm64:
    runs-on: ubuntu-24.04-arm
    needs: build-kernel-arm64
    steps:
      - uses: actions/checkout@v4

      # Download the ARM64 kernel artifact
      - name: Download kernel artifact
        uses: actions/download-artifact@v4
        with:
          name: kernel-arm64
          path: build/AprismaOS/sysroot/boot

       # Set up QEMU so ARM can run x86_64 containers
      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      # Pull and run the GRUB container under emulation
      - name: Create real ISO with GRUB container
        run: |
          docker pull --platform linux/amd64 stre4k/aprisma:grub-22.04
          docker run --platform linux/amd64 --rm -v $PWD:/workspace -w /workspace \
            stre4k/aprisma:grub-22.04 \
            sh -c 'mkdir -p build/isodir/boot/grub && cp build/AprismaOS/sysroot/boot/aprisma.kernel build/isodir/boot/aprisma.kernel && echo -e "menuentry \"Aprisma\" {\n  multiboot /boot/aprisma.kernel\n}" > build/isodir/boot/grub/grub.cfg && grub-mkrescue -o build/aprisma.iso build/isodir'

      # Upload the resulting ISO
      - name: Upload ISO artifact (arm64 GRUB)
        uses: actions/upload-artifact@v4
        with:
          name: iso-arm64-grub
          path: build/aprisma.iso

  # -----------------------------
  # Artifact Sanity Test Matrix
  # -----------------------------
  qemu-boot-test:
    runs-on: ubuntu-latest
    needs: [build-kernel-amd64, build-kernel-arm64, build-macos, build-iso-arm64]
    strategy:
      matrix:
        include:
          - artifact: iso-amd64
            is_iso: true
          - artifact: kernel-amd64
            is_iso: false
          - artifact: iso-arm64-grub
            is_iso: true
          - artifact: kernel-arm64
            is_iso: false
          - artifact: iso-macos
            is_iso: true
          - artifact: kernel-macos
            is_iso: false

    steps:
      - uses: actions/checkout@v4

      # Download artifact
      - name: Download ${{ matrix.artifact }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

      # Set up QEMU so ARM can run x86_64 containers
      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      - id: disable-man-pages
        name: Disable man pages
        run: sudo rm /var/lib/man-db/auto-update
        shell: bash

      # Install lightweight inspection tools
      - name: Install inspection tools
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq \
            binutils \
            genisoimage \
            grub-pc-bin \
            qemu-utils

      # Inspect the artifact
      - name: Sanity check ${{ matrix.artifact }}
        run: |
          FILE_DIR=${{ matrix.artifact }}
          if [ "${{ matrix.is_iso }}" = "true" ]; then
            FILE="$FILE_DIR/aprisma.iso"

            echo "üì¶ Inspecting ISO: $FILE"
            file "$FILE" || (echo "‚ùå ISO file is invalid" && exit 1)
            isoinfo -i "$FILE" -d || (echo "‚ùå ISO header invalid" && exit 1)
            echo "üìÅ ISO contents:"
            isoinfo -i "$FILE" -l | head -n 40

          else
            FILE="$FILE_DIR/aprisma.kernel"

            echo "üß™ Inspecting kernel ELF: $FILE"
            file "$FILE" || (echo "‚ùå Kernel file is invalid" && exit 1)
            readelf -h "$FILE" || (echo "‚ùå ELF headers invalid" && exit 1)

            echo "üîé Checking multiboot header..."
            if grub-file --is-x86-multiboot "$FILE"; then
              echo "‚úÖ Kernel is multiboot-compatible"
            else
              echo "‚ö†Ô∏è  Kernel is not multiboot-compatible"
            fi
          fi

          if [ "${{ matrix.is_iso }}" != "true" ]; then
            echo "üîç Checking embedded signature"
            if strings "$FILE" | grep -q "AprismaKernelSignature_v1"; then
              echo "‚úÖ Found embedded signature (AprismaKernelSignature_v1)"
            else
              echo "‚ùå Embedded signature missing!"
              exit 1
            fi

            echo "üîç Checking .signature section"
            if command -v objdump >/dev/null 2>&1; then
                echo "üîé Dumping .signature section:"
                objdump -s -j .signature "$FILE" || true
                if objdump -s -j .signature "$FILE" 2>/dev/null | grep -a "AprismaSectionV1"; then
                    echo "‚úÖ Found .signature section with AprismaSectionV1"
                else
                    echo "‚ö†Ô∏è .signature section not found in kernel"
                    exit 1
                fi
            else
                echo "‚ö†Ô∏è objdump not available, trying readelf"
                if readelf -x .signature "$FILE" 2>/dev/null | grep -a "AprismaSectionV1"; then
                    echo "‚úÖ Found .signature section via readelf"
                else
                    echo "‚ùå .signature section missing (and objdump not available)"
                    exit 1
                fi
            fi
          fi

          # Optional: Quick disk image metadata check (works for both ISO and kernel images)
      - name: Inspect disk/image metadata
        run: |
          FILE=${{ matrix.is_iso && format('{0}/aprisma.iso', matrix.artifact) || format('{0}/aprisma.kernel', matrix.artifact) }}
          echo "üìä Image metadata:"
          qemu-img info "$FILE" || echo "‚ö†Ô∏è qemu-img could not read image metadata"

